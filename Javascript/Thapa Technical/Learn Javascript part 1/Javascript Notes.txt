====================================
== 01. BASICS ==
====================================

three ways of writing JS
1. inline
2. internal 
3. external

* always remember script tag is on the last of the page
reight above the end of the body tag.

====================================
== 02. VALUES & VARIABLES ==
====================================
In JavaScript, values and variables are fundamental concepts that form the basis of programming.

Values:  A value is a piece of information that a program can work with. It can be a number, text, true/false, or more complex data.

Variables: A variable is a container that holds a value. It has a name and can be used to store and manipulate data in a program.

#Rules for writing variables
- start only with letter, underscore(_) or Dollar Sign($) and can contain numbers.
for eg: (rishabh123, _rishabh123 or $rish12abh).
- no reserved keywords.
- no spaces.
- case sensitive
- camelCase recommended.
- can be long as you need.

====================================
== 03. Data Types ==
====================================
-What is Data Type?
it defines the type of values that a variable can hold.

-Data types are of two types
a. Pimitive Data types
b. Object/non-Primitive Data types

-Primitive Data Types
1. Numbers
2. Strings
3. Boolean
4. Bigint (represents integer of arbritrary precision)
5. Undefind (yet to be defined) 
6. null (absence of a value)
7. Symbol (represents a unique and immutable data type, often used to create unique identifiers)

-Object Data Types
1. An Object
2. An Array
3. A Date

// According to w3 school //

-JavaScript has 8 Datatypes
String
Number
Bigint
Boolean
Undefined
Null
Symbol
Object

The Object Datatype
The object data type can contain both built-in objects, and user defined objects:

Built-in object types can be:

objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.

// Symbols https://playcode.io/javascript/symbols//
JavaScript Symbols
JavaScript Symbols are a new type of primitive data type introduced in the ES6 version of the language. They are used to represent unique values that can be used as identifiers or keys in objects. They are also used to create private properties and methods in classes.

Why should you use it?
Symbols are unique and immutable, so they can be used as unique identifiers in objects and classes.
Symbols can be used to create private properties and methods in classes.
Symbols are useful for creating constants that can be shared across different parts of your code.

Symbols

The JavaScript Symbol is a primitive data type, just like Number, String, Boolean, etc. It represents a unique identifier and can be used in various ways. Symbols are used to create object properties, for example, when you want to assign a unique identifier to an object. They can also be used as a way to create private properties in objects, as they are not enumerable. In addition, Symbols can be used to create unique constants, which are useful when creating APIs. Symbols are created using the Symbol() function. The function takes an optional string parameter, which can be used to give the Symbol a description. This description is useful for debugging purposes, as it can be used to identify the Symbol.


q: What is the result of `typeof null` in JavaScript?
a: its Object but thats a Bug.

q: Convert a string to a number?
a:We just need to add the '+' sign before the string or you can use a 
constructor Number().

q: Convert a number to a string?
a:We just need to add an empty string after the number or you can use a 
constructor String().

q: Explain the concept of truthy and falsy values in JavaScript. Provide examples?
a: in javascript, values are either considered "truthy" or "falsy" when evaluated in a boolean context.

truthy values are treated as true in boolean contexts. example include:
-true 
-any non-empty string ("hello")
-any non-zero number (42)
-arrays and objects, even if they're not empty

falsy values are treated as false in boolean contexts. example include:
-false
-0 (zero)
-' '(an empty string)
-null
-undefined
-NaN (Not a Number)


//parseInt, parseFloat 
-parseInt is used for converting to integers and ignores anything after the decimal point.
-parseFloat is used for converting to floating-point numbers, preserving the decimal part.
-Both functions will attempt to convert as much of the string as possible until an invalid character is encountered.

//NaN == NaN
it always gives false.

====================================
== 04. Concatination & Coercion ==
====================================

Concatenation in JavaScript
In JavaScript, the + sign is not only used for arithmetic addition but also for string concatenation. 
When the + operator is used with strings, it concatenates the strings together.

It's important to note that if any operand of the + operator is a string, 
JavaScript will treat the other operands as strings as well, resulting in string concatenation. 
If both operands are numbers, the + operator performs numeric addition.

const str = "Hello" + "World";
console.log(str);

Type coercion is the automatic conversion of "values" from one data type to another.

It is a fundamental part of JavaScript and can be used to make code more readable and efficient.
There are two types of coercion in JavaScript: implicit and explicit. Implicit coercion happens automatically, while explicit coercion is done manually by the programmer.

note: It's worth noting that type coercion can lead to unexpected results, so it's essential to be aware of how JavaScript handles these situations.

//* ============================
//* Tricky Interview Questions
//* ============================
// console.log(10 + "20");
// console.log(9 - "5");
// console.log("Java" + "Script");
// console.log(" " + " ");
// console.log(" " + 0);
// console.log("vinod" - "thapa");
// console.log(true + true);
// console.log(true + false);
// console.log(false + true);
// console.log(false - true);

====================================
== 05. Expressions & Operators ==
====================================

Expressions is a combination of operand/operands and the operator.
where operator is used to perform the operation of the operators.

-Types of Operators in JS
1.Assignment operators
2.Arithmetic operators
3.In arithmetic we increment and decrement operator.
4.Comparison operators
5.Logical operators
6.String operators
7.Conditional (ternary) operator

====================================
== 06. Control Statements & Loops ==
====================================
1. if.. Else Statement
2. Switch Statement
3. While Loop
4. Do While Loop
5. For Loop
6. For In / For Of Loop
(Later in arrays)

===================
== 07. Functions ==
===================

- Function is ab Block of reusable code.
- that performs a specific task or set of task.
- Functions are used to organize code into modular and manafeable pieces.
- promotes code reuse and make programs more readable.

function functionName(parameters){
    // code to be executed
    return result; // optional return statement
}

1. function Declaration/Defination
2. function invocation/Calling
3. function parameter
4. function argument
5. function Expressions
6. anonymous function
7. return function
8. IIFE (Immediately Invoked Function Expression)
9. more on functions

====================
== 08. ECMAScript ==
====================

--2015:
- LET and const
- Template Strings & String Interopolation
- Default Parameters
- Default Arguments
- Arrow Functions
- Destructuring
- Object properties
- Rest Operators
- Spread Operators

===============
== 09. Array ==
===============
-Array is an Object that reresents a collection of 
Similar type of elements.

-head: or first element refers to the element at index 0.
-tail: or last element referes to the element at the last element which can be obtained
using array.length - 1.

-ECMAScript 2022: also introduces new .at() method in arrays which helps to index from last elements too easily.
last index can be accessed by index -1 so on and so forth. 

-creating array 
1.array constructor
2.array literals

-accessing elements

-modifying an array 

-array traversal
1. loops(for, while, do-while)
2. for...of (for getting the values)
3. for...in (for getting the index)
4. forEach (for modifying and displaying the array but it dosn't return anything).
5. map (it can returns a value and can change and mutate the value.)

// forEach vs map {KEY DIFFERENCES}
// no return / returns a value
// no return, no chaining / returns a value so yes chaining
// you dont need a new array but you want to modify and display the array./
// when you want a new array based on the transformation of previous array.

-INSERT/ADD/REPLACE/DELETE(CRUD)
push(),pop(),shift(),unshift()

-ADD and REMOVE anywhere in elements.
splice()

-SEARCH
1.indexOf(searchElement, fromIndex); it returns the FIRST index at which the given element can be found in the array,
or -1 if it is not present.
2.lastIndexOf Method: The lastIndexOf() method of Array instances returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
3.includes method checks whether an array includes a certain element, returning true or false.

-FIND AND SEARCH
1.find Method The find method is used to find the first element in an array that satisfies a provided testing function. It returns the first matching element or undefined if no element is found.

2.findIndex Method: The findIndex() method of TypedArray instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.

3.filter Method: The filter method creates a new array with all elements that pass the test implemented by the provided function.

4.set method (it removes the duplicate values)

-SORT and COMPARE
Sorting an Array: The sort method sorts the elements of an array in place and returns the sorted array. By default, it sorts elements as strings.

(its a trick actually)compare method actually sorts number properly more then 1 digit because 
by default sort() sorts elements as strings.
numbers.sort((a,b) => {if(a>b) return 1;   if(b>a) return -1 }); swap -1 to 1 for descending order.

-Reduce
// The reduce method in JavaScript is used to accumulate or reduce an array to a single value. It iterates over the elements of an array and applies a callback function to each element, updating an accumulator value with the result. The reduce method takes a callback function as its first argument and an optional initial value for the accumulator as the second argument.
// jaise aapko ecommerce website mein jab final total/average nikalte hai tabb Add to Cart products ka tab reduce lagta hai

x
array.reduce(function callback(accumulator, currentValue, index, array) {
  Your logic here
  Return the updated accumulator value
}, initialValue);

=================
== 10. Strings ==
=================
Strings in JavaScript are a fundamental data type that represents a sequence of characters

// Note:
//? Strings created with single or double quotes works the same.
// There is no difference between the two.

-=String Properties
length: Property that returns the length of the string (number of characters).

-=Escape Character: In JavaScript, the backslash \ is used as an escape character. It allows you to include special characters in a string.

// Code	   Result	    Description
// \'	    '	        Single quote
// \"	    "	        Double quote
// \\	    \	        Backslash

/ let text = "My name is " Thapa Technical " & I am a Full Stack Developer. ";
// let text =
//   "My name is ' Thapa Technical ' & \\ I am a \"Full Stack \" Developer. ";
// // let text = 'My name is " Thapa Technical " & I am a Full Stack Developer. ';

// console.log(text);

=====================
== 11. Math Object ==
=====================

Math: The Math namespace object contains static properties and methods for mathematical constants and functions.
Math works with the Number type. It doesn't work with BigInt.

//? 1: Constants:
//* - Math.PI: Represents the mathematical constant Pi (π).

2. Basic Operations:
Math.abs(): The Math.abs() static method returns the absolute value of a number.
or in simple, how far the number is from 0. It will be always positive.

Math.abs(): how far the numnber is from 0.
Math.round(x)
Math.ceil(x):
Math.floor(x):
Math.trunc(x): and Math.sign() were added to JavaScript 2015 - ES6.
Math.sign():

3. Exponential and Logarithmic Functions:
Math.pow(x, y):
Math.sqrt():
Math.log(x) returns the natural logarithm of x.
Math.log2(x) returns the base 2 logarithm of x.

4. Random
Generate Random number
Math.random(): Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)

console.log((Math.random() * 100).toFixed(3));

================
== 12. Window ==
================
-DOM is focused on the content of the page, DOM is a Live Representaion of a Document.
-BOM is focused on the browser environment.

the Window object serves as the global object that encompasses both the BOM and the DOM when working in a 
browser environment.

JavaScript access entire DOM tree as an Object.
- DOM is a bridge between your HTML and the JS.

-DOM provides the multiple properties and methods to dynamically change the content of the HTML document using javascript.

-DOM and DOM api are same


in DOM search
-if you target 'element' the you get 'collections' (it can be iterable) / on the spot update hote.
-if you target 'nodes' then you get node 'list'. / no on the spot update hote.

-innerHTML vs innerText(jo browser mein dikhta hai) vs textContent(css apply nahi hota hai).
The `innerHTML` property returns the complete content, including all HTML tags, inside the `ul` elements and their text content.
 Example using `innerText`: Prints text as it appears on screen, considering styling and excluding hidden text.
 Example using `textContent`: Prints text as it is in the markup, including hidden text and without considering styling.